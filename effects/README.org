#+title: Steme Effects Language
#+author: Marc Nieper-Wi√ükirchen

The core language currently implements the semantics described in [[https://doi.org/10.2168/LMCS-9(4:23)2013][Handling Algebraic Effects]]
by Gordon D. Plotkin and Matija Pretnar.  It uses Paul B. Levy's /call-by-push-value/ paradigm, which subsumes call-by-value and call-by-name,
see [[https://link.springer.com/chapter/10.1007/3-540-48959-2_17][Call-by-Push-Value: A Subsuming Paradigm]].

In the core language, we have a clear separation between /value terms/ and /computation terms/.  A value term evaluates to a single value 
without side effect.  A computation term evaluates to (possibly) multiple values with possible side effects.  /Effect handlers/ dynamically 
modify the side effects of computations.  Computations can be /thunked/ to become values and such values become computations when /forced/.

#+BEGIN_CENTER
Slogan: Values are, computations do.
#+END_CENTER

* Examples

** Factorial

The following example prints the factorial of 6.

#+BEGIN_SRC scheme
(with-handler
    (((display k s)
      (begin
        (display s)
        (display "\n")
        (k))))
  (letrec ((fact (lambda (n)
                   (if (zero? n)
                       (values 1)
                       (receive (x)
                           ((force fact) (- n 1))
                         (values (* x n)))))))
    (receive (res)
        ((force fact) 6)
      (display res))))
#+END_SRC

* Syntax

** Values

#+BEGIN_EXAMPLE
<value> ::= <variable>
          | <literal>
          | (thunk <computation>)
          | (<function> <value>*)

<function> ::= + | * | - | zero?

<variable> ::= <identifier>

<literal>         ::= <quotation> | <self-evaluating>
<self-evaluating> ::= <boolean> | <number> | <vector>
                    | <character> | <string> | <bytevector>
<quotation>       ::= (quote <datum>)
#+END_EXAMPLE

** Computations

#+BEGIN_EXAMPLE
<computation> ::= (begin <computation>*)
                | (car <computation>)
                | (cdr <computation>)
                | (cons <computation> <computation>)
                | (force <value>)
                | (if <value> <computation> <computation>)
                | (lambda (<variable>*) <computation>)
                | (letrec (<binding spec>*) <computation>)
                | (receive (variable>*) <computation> <computation>)
                | (values <value>*)
                | (with-handler (<handler clause>*) <computation>)
                | <application>
                | <continuation>
                | <operation>

<application>  ::= (<computation> <value>*)
<continuation> ::= (<continuation variable> <value>*)
<operation>    ::= (<operator> <value>*)

<operator> ::= display | raise

<continuation variable> ::= <identifier>

<binding spec> ::= (<variable> <computation>)

<handler clause>  ::= <operator clause> | <values clause>
<operator clause> ::= ((<operator> <continuation variable> <variable>*)
                        <computation>)
<values clause> ::= ((values <variable*>) <computation>)
#+END_EXAMPLE

** Programs
#+BEGIN_EXAMPLE
<program> ::= <computation>
#+END_EXAMPLE

* Semantics

/TODO/
